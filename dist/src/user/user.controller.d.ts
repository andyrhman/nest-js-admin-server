/// <reference types="mongoose/types/aggregate" />
/// <reference types="mongoose/types/callback" />
/// <reference types="mongoose/types/collection" />
/// <reference types="mongoose/types/connection" />
/// <reference types="mongoose/types/cursor" />
/// <reference types="mongoose/types/document" />
/// <reference types="mongoose/types/error" />
/// <reference types="mongoose/types/expressions" />
/// <reference types="mongoose/types/helpers" />
/// <reference types="mongoose/types/middlewares" />
/// <reference types="mongoose/types/indexes" />
/// <reference types="mongoose/types/models" />
/// <reference types="mongoose/types/mongooseoptions" />
/// <reference types="mongoose/types/pipelinestage" />
/// <reference types="mongoose/types/populate" />
/// <reference types="mongoose/types/query" />
/// <reference types="mongoose/types/schemaoptions" />
/// <reference types="mongoose/types/schematypes" />
/// <reference types="mongoose/types/session" />
/// <reference types="mongoose/types/types" />
/// <reference types="mongoose/types/utility" />
/// <reference types="mongoose/types/validation" />
/// <reference types="mongoose/types/virtuals" />
/// <reference types="mongoose" />
/// <reference types="mongoose/types/inferschematype" />
import { UserService } from './user.service';
import { UserCreateDto } from './models/user-create.dto';
import { Response } from 'express';
export declare class UserController {
    private userService;
    constructor(userService: UserService);
    all(page: number, limit: number, search: string): Promise<{
        data: any[];
        meta: import("src/common/paginated.interface").IPaginationMeta;
    }>;
    create(body: UserCreateDto, response: Response): Promise<{
        toObject(): any;
        fullName: string;
        username: string;
        email: string;
        created_at: Date;
        role?: import("../role/models/role.schema").IRole;
        URL: string;
        alinkColor: string;
        all: HTMLAllCollection;
        anchors: HTMLCollectionOf<HTMLAnchorElement>;
        applets: HTMLCollection;
        bgColor: string;
        body: HTMLElement;
        characterSet: string;
        charset: string;
        compatMode: string;
        contentType: string;
        cookie: string;
        currentScript: HTMLOrSVGScriptElement;
        defaultView: Window & typeof globalThis;
        designMode: string;
        dir: string;
        doctype: DocumentType;
        documentElement: HTMLElement;
        documentURI: string;
        domain: string;
        embeds: HTMLCollectionOf<HTMLEmbedElement>;
        fgColor: string;
        forms: HTMLCollectionOf<HTMLFormElement>;
        fullscreen: boolean;
        fullscreenEnabled: boolean;
        head: HTMLHeadElement;
        hidden: boolean;
        images: HTMLCollectionOf<HTMLImageElement>;
        implementation: DOMImplementation;
        inputEncoding: string;
        lastModified: string;
        linkColor: string;
        links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
        location: Location;
        onfullscreenchange: (this: Document, ev: Event) => any;
        onfullscreenerror: (this: Document, ev: Event) => any;
        onpointerlockchange: (this: Document, ev: Event) => any;
        onpointerlockerror: (this: Document, ev: Event) => any;
        onreadystatechange: (this: Document, ev: Event) => any;
        onvisibilitychange: (this: Document, ev: Event) => any;
        ownerDocument: null;
        pictureInPictureEnabled: boolean;
        plugins: HTMLCollectionOf<HTMLEmbedElement>;
        readyState: DocumentReadyState;
        referrer: string;
        rootElement: SVGSVGElement;
        scripts: HTMLCollectionOf<HTMLScriptElement>;
        scrollingElement: Element;
        timeline: DocumentTimeline;
        title: string;
        visibilityState: DocumentVisibilityState;
        vlinkColor: string;
        adoptNode<T extends Node>(node: T): T;
        captureEvents(): void;
        caretRangeFromPoint(x: number, y: number): Range;
        clear(): void;
        close(): void;
        createAttribute(localName: string): Attr;
        createAttributeNS(namespace: string, qualifiedName: string): Attr;
        createCDATASection(data: string): CDATASection;
        createComment(data: string): Comment;
        createDocumentFragment(): DocumentFragment;
        createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
        createElement<K_1 extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K_1, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K_1];
        createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
        createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
        createElementNS<K_2 extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K_2): SVGElementTagNameMap[K_2];
        createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
        createElementNS<K_3 extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K_3): MathMLElementTagNameMap[K_3];
        createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
        createElementNS(namespaceURI: string, qualifiedName: string, options?: ElementCreationOptions): Element;
        createElementNS(namespace: string, qualifiedName: string, options?: string | ElementCreationOptions): Element;
        createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
        createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
        createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
        createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
        createEvent(eventInterface: "BlobEvent"): BlobEvent;
        createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
        createEvent(eventInterface: "CloseEvent"): CloseEvent;
        createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
        createEvent(eventInterface: "CustomEvent"): CustomEvent<any>;
        createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
        createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
        createEvent(eventInterface: "DragEvent"): DragEvent;
        createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
        createEvent(eventInterface: "Event"): Event;
        createEvent(eventInterface: "Events"): Event;
        createEvent(eventInterface: "FocusEvent"): FocusEvent;
        createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
        createEvent(eventInterface: "FormDataEvent"): FormDataEvent;
        createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
        createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
        createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
        createEvent(eventInterface: "InputEvent"): InputEvent;
        createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
        createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
        createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
        createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
        createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
        createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
        createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
        createEvent(eventInterface: "MessageEvent"): MessageEvent<any>;
        createEvent(eventInterface: "MouseEvent"): MouseEvent;
        createEvent(eventInterface: "MouseEvents"): MouseEvent;
        createEvent(eventInterface: "MutationEvent"): MutationEvent;
        createEvent(eventInterface: "MutationEvents"): MutationEvent;
        createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
        createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
        createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
        createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
        createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
        createEvent(eventInterface: "PointerEvent"): PointerEvent;
        createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
        createEvent(eventInterface: "ProgressEvent"): ProgressEvent<EventTarget>;
        createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
        createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
        createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
        createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
        createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
        createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
        createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
        createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
        createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
        createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
        createEvent(eventInterface: "StorageEvent"): StorageEvent;
        createEvent(eventInterface: "SubmitEvent"): SubmitEvent;
        createEvent(eventInterface: "TouchEvent"): TouchEvent;
        createEvent(eventInterface: "TrackEvent"): TrackEvent;
        createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
        createEvent(eventInterface: "UIEvent"): UIEvent;
        createEvent(eventInterface: "UIEvents"): UIEvent;
        createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
        createEvent(eventInterface: "WheelEvent"): WheelEvent;
        createEvent(eventInterface: string): Event;
        createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter): NodeIterator;
        createProcessingInstruction(target: string, data: string): ProcessingInstruction;
        createRange(): Range;
        createTextNode(data: string): Text;
        createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter): TreeWalker;
        execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
        exitFullscreen(): Promise<void>;
        exitPictureInPicture(): Promise<void>;
        exitPointerLock(): void;
        getElementById(elementId: string): HTMLElement;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByName(elementName: string): NodeListOf<HTMLElement>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName<K_6 extends keyof MathMLElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<MathMLElementTagNameMap[K_6]>;
        getElementsByTagName<K_7 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_7]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        getSelection(): Selection;
        hasFocus(): boolean;
        hasStorageAccess(): Promise<boolean>;
        importNode<T_1 extends Node>(node: T_1, deep?: boolean): T_1;
        open(unused1?: string, unused2?: string): Document;
        open(url: string | URL, name: string, features: string): Window;
        queryCommandEnabled(commandId: string): boolean;
        queryCommandIndeterm(commandId: string): boolean;
        queryCommandState(commandId: string): boolean;
        queryCommandSupported(commandId: string): boolean;
        queryCommandValue(commandId: string): string;
        releaseEvents(): void;
        requestStorageAccess(): Promise<void>;
        write(...text: string[]): void;
        writeln(...text: string[]): void;
        addEventListener<K_8 extends keyof DocumentEventMap>(type: K_8, listener: (this: Document, ev: DocumentEventMap[K_8]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_9 extends keyof DocumentEventMap>(type: K_9, listener: (this: Document, ev: DocumentEventMap[K_9]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        baseURI: string;
        childNodes: NodeListOf<ChildNode>;
        firstChild: ChildNode;
        isConnected: boolean;
        lastChild: ChildNode;
        nextSibling: ChildNode;
        nodeName: string;
        nodeType: number;
        nodeValue: string;
        parentElement: HTMLElement;
        parentNode: ParentNode;
        previousSibling: ChildNode;
        textContent: string;
        appendChild<T_2 extends Node>(node: T_2): T_2;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_3 extends Node>(node: T_3, child: Node): T_3;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_4 extends Node>(child: T_4): T_4;
        replaceChild<T_5 extends Node>(node: Node, child: T_5): T_5;
        ELEMENT_NODE: 1;
        ATTRIBUTE_NODE: 2;
        TEXT_NODE: 3;
        CDATA_SECTION_NODE: 4;
        ENTITY_REFERENCE_NODE: 5;
        ENTITY_NODE: 6;
        PROCESSING_INSTRUCTION_NODE: 7;
        COMMENT_NODE: 8;
        DOCUMENT_NODE: 9;
        DOCUMENT_TYPE_NODE: 10;
        DOCUMENT_FRAGMENT_NODE: 11;
        NOTATION_NODE: 12;
        DOCUMENT_POSITION_DISCONNECTED: 1;
        DOCUMENT_POSITION_PRECEDING: 2;
        DOCUMENT_POSITION_FOLLOWING: 4;
        DOCUMENT_POSITION_CONTAINS: 8;
        DOCUMENT_POSITION_CONTAINED_BY: 16;
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        activeElement: Element;
        adoptedStyleSheets: CSSStyleSheet[];
        fullscreenElement: Element;
        pictureInPictureElement: Element;
        pointerLockElement: Element;
        styleSheets: StyleSheetList;
        elementFromPoint(x: number, y: number): Element;
        elementsFromPoint(x: number, y: number): Element[];
        getAnimations(): Animation[];
        fonts: FontFaceSet;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncancel: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        childElementCount: number;
        children: HTMLCollection;
        firstElementChild: Element;
        lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_10 extends keyof HTMLElementTagNameMap>(selectors: K_10): HTMLElementTagNameMap[K_10];
        querySelector<K_11 extends keyof SVGElementTagNameMap>(selectors: K_11): SVGElementTagNameMap[K_11];
        querySelector<K_12 extends keyof MathMLElementTagNameMap>(selectors: K_12): MathMLElementTagNameMap[K_12];
        querySelector<K_13 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_13): HTMLElementDeprecatedTagNameMap[K_13];
        querySelector<E extends Element = Element>(selectors: string): E;
        querySelectorAll<K_14 extends keyof HTMLElementTagNameMap>(selectors: K_14): NodeListOf<HTMLElementTagNameMap[K_14]>;
        querySelectorAll<K_15 extends keyof SVGElementTagNameMap>(selectors: K_15): NodeListOf<SVGElementTagNameMap[K_15]>;
        querySelectorAll<K_16 extends keyof MathMLElementTagNameMap>(selectors: K_16): NodeListOf<MathMLElementTagNameMap[K_16]>;
        querySelectorAll<K_17 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_17): NodeListOf<HTMLElementDeprecatedTagNameMap[K_17]>;
        querySelectorAll<E_1 extends Element = Element>(selectors: string): NodeListOf<E_1>;
        replaceChildren(...nodes: (string | Node)[]): void;
        createExpression(expression: string, resolver?: XPathNSResolver): XPathExpression;
        createNSResolver(nodeResolver: Node): Node;
        evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver, type?: number, result?: XPathResult): XPathResult;
        _id: import("mongoose").Types.ObjectId;
    }>;
    get(id: string): Promise<{
        toObject(): any;
        fullName: string;
        username: string;
        email: string;
        created_at: Date;
        role?: import("../role/models/role.schema").IRole;
        URL: string;
        alinkColor: string;
        all: HTMLAllCollection;
        anchors: HTMLCollectionOf<HTMLAnchorElement>;
        applets: HTMLCollection;
        bgColor: string;
        body: HTMLElement;
        characterSet: string;
        charset: string;
        compatMode: string;
        contentType: string;
        cookie: string;
        currentScript: HTMLOrSVGScriptElement;
        defaultView: Window & typeof globalThis;
        designMode: string;
        dir: string;
        doctype: DocumentType;
        documentElement: HTMLElement;
        documentURI: string;
        domain: string;
        embeds: HTMLCollectionOf<HTMLEmbedElement>;
        fgColor: string;
        forms: HTMLCollectionOf<HTMLFormElement>;
        fullscreen: boolean;
        fullscreenEnabled: boolean;
        head: HTMLHeadElement;
        hidden: boolean;
        images: HTMLCollectionOf<HTMLImageElement>;
        implementation: DOMImplementation;
        inputEncoding: string;
        lastModified: string;
        linkColor: string;
        links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
        location: Location;
        onfullscreenchange: (this: Document, ev: Event) => any;
        onfullscreenerror: (this: Document, ev: Event) => any;
        onpointerlockchange: (this: Document, ev: Event) => any;
        onpointerlockerror: (this: Document, ev: Event) => any;
        onreadystatechange: (this: Document, ev: Event) => any;
        onvisibilitychange: (this: Document, ev: Event) => any;
        ownerDocument: null;
        pictureInPictureEnabled: boolean;
        plugins: HTMLCollectionOf<HTMLEmbedElement>;
        readyState: DocumentReadyState;
        referrer: string;
        rootElement: SVGSVGElement;
        scripts: HTMLCollectionOf<HTMLScriptElement>;
        scrollingElement: Element;
        timeline: DocumentTimeline;
        title: string;
        visibilityState: DocumentVisibilityState;
        vlinkColor: string;
        adoptNode<T extends Node>(node: T): T;
        captureEvents(): void;
        caretRangeFromPoint(x: number, y: number): Range;
        clear(): void;
        close(): void;
        createAttribute(localName: string): Attr;
        createAttributeNS(namespace: string, qualifiedName: string): Attr;
        createCDATASection(data: string): CDATASection;
        createComment(data: string): Comment;
        createDocumentFragment(): DocumentFragment;
        createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
        createElement<K_1 extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K_1, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K_1];
        createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
        createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
        createElementNS<K_2 extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K_2): SVGElementTagNameMap[K_2];
        createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
        createElementNS<K_3 extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K_3): MathMLElementTagNameMap[K_3];
        createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
        createElementNS(namespaceURI: string, qualifiedName: string, options?: ElementCreationOptions): Element;
        createElementNS(namespace: string, qualifiedName: string, options?: string | ElementCreationOptions): Element;
        createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
        createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
        createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
        createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
        createEvent(eventInterface: "BlobEvent"): BlobEvent;
        createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
        createEvent(eventInterface: "CloseEvent"): CloseEvent;
        createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
        createEvent(eventInterface: "CustomEvent"): CustomEvent<any>;
        createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
        createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
        createEvent(eventInterface: "DragEvent"): DragEvent;
        createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
        createEvent(eventInterface: "Event"): Event;
        createEvent(eventInterface: "Events"): Event;
        createEvent(eventInterface: "FocusEvent"): FocusEvent;
        createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
        createEvent(eventInterface: "FormDataEvent"): FormDataEvent;
        createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
        createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
        createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
        createEvent(eventInterface: "InputEvent"): InputEvent;
        createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
        createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
        createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
        createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
        createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
        createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
        createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
        createEvent(eventInterface: "MessageEvent"): MessageEvent<any>;
        createEvent(eventInterface: "MouseEvent"): MouseEvent;
        createEvent(eventInterface: "MouseEvents"): MouseEvent;
        createEvent(eventInterface: "MutationEvent"): MutationEvent;
        createEvent(eventInterface: "MutationEvents"): MutationEvent;
        createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
        createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
        createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
        createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
        createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
        createEvent(eventInterface: "PointerEvent"): PointerEvent;
        createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
        createEvent(eventInterface: "ProgressEvent"): ProgressEvent<EventTarget>;
        createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
        createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
        createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
        createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
        createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
        createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
        createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
        createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
        createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
        createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
        createEvent(eventInterface: "StorageEvent"): StorageEvent;
        createEvent(eventInterface: "SubmitEvent"): SubmitEvent;
        createEvent(eventInterface: "TouchEvent"): TouchEvent;
        createEvent(eventInterface: "TrackEvent"): TrackEvent;
        createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
        createEvent(eventInterface: "UIEvent"): UIEvent;
        createEvent(eventInterface: "UIEvents"): UIEvent;
        createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
        createEvent(eventInterface: "WheelEvent"): WheelEvent;
        createEvent(eventInterface: string): Event;
        createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter): NodeIterator;
        createProcessingInstruction(target: string, data: string): ProcessingInstruction;
        createRange(): Range;
        createTextNode(data: string): Text;
        createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter): TreeWalker;
        execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
        exitFullscreen(): Promise<void>;
        exitPictureInPicture(): Promise<void>;
        exitPointerLock(): void;
        getElementById(elementId: string): HTMLElement;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByName(elementName: string): NodeListOf<HTMLElement>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName<K_6 extends keyof MathMLElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<MathMLElementTagNameMap[K_6]>;
        getElementsByTagName<K_7 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_7]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        getSelection(): Selection;
        hasFocus(): boolean;
        hasStorageAccess(): Promise<boolean>;
        importNode<T_1 extends Node>(node: T_1, deep?: boolean): T_1;
        open(unused1?: string, unused2?: string): Document;
        open(url: string | URL, name: string, features: string): Window;
        queryCommandEnabled(commandId: string): boolean;
        queryCommandIndeterm(commandId: string): boolean;
        queryCommandState(commandId: string): boolean;
        queryCommandSupported(commandId: string): boolean;
        queryCommandValue(commandId: string): string;
        releaseEvents(): void;
        requestStorageAccess(): Promise<void>;
        write(...text: string[]): void;
        writeln(...text: string[]): void;
        addEventListener<K_8 extends keyof DocumentEventMap>(type: K_8, listener: (this: Document, ev: DocumentEventMap[K_8]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_9 extends keyof DocumentEventMap>(type: K_9, listener: (this: Document, ev: DocumentEventMap[K_9]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        baseURI: string;
        childNodes: NodeListOf<ChildNode>;
        firstChild: ChildNode;
        isConnected: boolean;
        lastChild: ChildNode;
        nextSibling: ChildNode;
        nodeName: string;
        nodeType: number;
        nodeValue: string;
        parentElement: HTMLElement;
        parentNode: ParentNode;
        previousSibling: ChildNode;
        textContent: string;
        appendChild<T_2 extends Node>(node: T_2): T_2;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_3 extends Node>(node: T_3, child: Node): T_3;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_4 extends Node>(child: T_4): T_4;
        replaceChild<T_5 extends Node>(node: Node, child: T_5): T_5;
        ELEMENT_NODE: 1;
        ATTRIBUTE_NODE: 2;
        TEXT_NODE: 3;
        CDATA_SECTION_NODE: 4;
        ENTITY_REFERENCE_NODE: 5;
        ENTITY_NODE: 6;
        PROCESSING_INSTRUCTION_NODE: 7;
        COMMENT_NODE: 8;
        DOCUMENT_NODE: 9;
        DOCUMENT_TYPE_NODE: 10;
        DOCUMENT_FRAGMENT_NODE: 11;
        NOTATION_NODE: 12;
        DOCUMENT_POSITION_DISCONNECTED: 1;
        DOCUMENT_POSITION_PRECEDING: 2;
        DOCUMENT_POSITION_FOLLOWING: 4;
        DOCUMENT_POSITION_CONTAINS: 8;
        DOCUMENT_POSITION_CONTAINED_BY: 16;
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        activeElement: Element;
        adoptedStyleSheets: CSSStyleSheet[];
        fullscreenElement: Element;
        pictureInPictureElement: Element;
        pointerLockElement: Element;
        styleSheets: StyleSheetList;
        elementFromPoint(x: number, y: number): Element;
        elementsFromPoint(x: number, y: number): Element[];
        getAnimations(): Animation[];
        fonts: FontFaceSet;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncancel: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        childElementCount: number;
        children: HTMLCollection;
        firstElementChild: Element;
        lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_10 extends keyof HTMLElementTagNameMap>(selectors: K_10): HTMLElementTagNameMap[K_10];
        querySelector<K_11 extends keyof SVGElementTagNameMap>(selectors: K_11): SVGElementTagNameMap[K_11];
        querySelector<K_12 extends keyof MathMLElementTagNameMap>(selectors: K_12): MathMLElementTagNameMap[K_12];
        querySelector<K_13 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_13): HTMLElementDeprecatedTagNameMap[K_13];
        querySelector<E extends Element = Element>(selectors: string): E;
        querySelectorAll<K_14 extends keyof HTMLElementTagNameMap>(selectors: K_14): NodeListOf<HTMLElementTagNameMap[K_14]>;
        querySelectorAll<K_15 extends keyof SVGElementTagNameMap>(selectors: K_15): NodeListOf<SVGElementTagNameMap[K_15]>;
        querySelectorAll<K_16 extends keyof MathMLElementTagNameMap>(selectors: K_16): NodeListOf<MathMLElementTagNameMap[K_16]>;
        querySelectorAll<K_17 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_17): NodeListOf<HTMLElementDeprecatedTagNameMap[K_17]>;
        querySelectorAll<E_1 extends Element = Element>(selectors: string): NodeListOf<E_1>;
        replaceChildren(...nodes: (string | Node)[]): void;
        createExpression(expression: string, resolver?: XPathNSResolver): XPathExpression;
        createNSResolver(nodeResolver: Node): Node;
        evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver, type?: number, result?: XPathResult): XPathResult;
        _id: import("mongoose").Types.ObjectId;
    }>;
    delete(id: string, response: Response): Promise<Response<any, Record<string, any>>>;
}
